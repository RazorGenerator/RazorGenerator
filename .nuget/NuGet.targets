<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <PropertyGroup>
       <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)\..\</SolutionDir>
       
       <!-- Enable the restore command to run before builds -->
       <RestorePackages Condition="  '$(RestorePackages)' == '' ">false</RestorePackages>

       <!-- Property that enables building a package from a project -->
       <BuildPackage Condition=" '$(BuildPackage)' == '' ">false</BuildPackage>

       <!-- Determines if package restore consent is required to restore packages -->
       <RequireRestoreConsent>false</RequireRestoreConsent>
       
       <!-- Download NuGet.exe if it does not already exist -->
       <DownloadNuGetExe Condition=" '$(DownloadNuGetExe)' == '' ">true</DownloadNuGetExe>
   </PropertyGroup>
   
   <ItemGroup Condition=" '$(PackageSources)' == '' ">
       <!-- Package sources used to restore packages. By default will used the registered sources under %APPDATA%\NuGet\NuGet.Config -->
       <PackageSource Include="https://nuget.org/api/v2/" />
   </ItemGroup>

   
   <PropertyGroup>
       <!-- NuGet command -->
       <NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(MsBuildThisFileDirectory)\nuget.exe</NuGetExePath>
       <PackageSources Condition=" $(PackageSources) == '' ">@(PackageSource)</PackageSources>
       
       <NuGetCommand Condition=" '$(OS)' == 'Windows_NT'">"$(NuGetExePath)"</NuGetCommand>
       <NuGetCommand Condition=" '$(OS)' != 'Windows_NT' ">mono --runtime=v4.0.30319 $(NuGetExePath)</NuGetCommand>

       <PackageOutputDir Condition="$(PackageOutputDir) == ''">$([System.IO.Path]::GetFullPath('$(MsBuildThisFileDirectory)..\artifacts'))</PackageOutputDir>

        <!-- Commands -->
       <BuildCommand>$(NuGetCommand) pack "$(ProjectPath)" -p Configuration=$(Configuration) -o "$(PackageOutputDir)" -symbols $(BuildPackageFlags)</BuildCommand>

       <!-- Make the build depend on restore packages -->
       <BuildDependsOn Condition="$(BuildPackage) == 'true'">
           $(BuildDependsOn);
           BuildPackage;
       </BuildDependsOn>
   </PropertyGroup>

   <Target Name="CheckPrerequisites">
       <!-- Raise an error if we're unable to locate nuget.exe  -->
       <Error Condition="'$(DownloadNuGetExe)' != 'true' AND !Exists('$(NuGetExePath)')" Text="Unable to locate '$(NuGetExePath)'" />
   
       <!--
       Take advantage of MsBuild's build dependency tracking to make sure that we only ever download nuget.exe once.
       This effectively acts as a lock that makes sure that the download operation will only happen once and all
       parallel builds will have to wait for it to complete.
       -->
       <MsBuild Targets="_DownloadNuGet" Projects="$(MSBuildThisFileFullPath)" Properties="Configuration=NOT_IMPORTANT;Platform=AnyCPU" />
   </Target>

   <Target Name="_DownloadNuGet">
       <DownloadNuGet OutputFilename="$(NuGetExePath)" Condition=" '$(DownloadNuGetExe)' == 'true' AND !Exists('$(NuGetExePath)')" />
   </Target>

   <Target Name="BuildPackage" DependsOnTargets="CheckPrerequisites">
        <MakeDir Directories="$(PackageOutputDir)"
                     Condition=" !Exists('$(PackageOutputDir)') " />
                     
       <Exec Command="$(BuildCommand)" 
             Condition=" '$(OS)' != 'Windows_NT' " />
             
       <Exec Command="$(BuildCommand)"
             LogStandardErrorAsError="true"
             Condition=" '$(OS)' == 'Windows_NT' " />
   </Target>
   
   <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
       <ParameterGroup>
           <OutputFilename ParameterType="System.String" Required="true" />
       </ParameterGroup>
       <Task>
           <Reference Include="System.Core" />
           <Using Namespace="System" />
           <Using Namespace="System.IO" />
           <Using Namespace="System.Net" />
           <Using Namespace="Microsoft.Build.Framework" />
           <Using Namespace="Microsoft.Build.Utilities" />
           <Code Type="Fragment" Language="cs">
               <![CDATA[
               try {
                   OutputFilename = Path.GetFullPath(OutputFilename);

                   Log.LogMessage("Downloading latest version of NuGet.exe...");
                   WebClient webClient = new WebClient();
                   webClient.DownloadFile("https://dist.nuget.org/win-x86-commandline/latest/nuget.exe", OutputFilename);

                   return true;
               }
               catch (Exception ex) {
                   Log.LogErrorFromException(ex);
                   return false;
               }
           ]]>
           </Code>
       </Task>
   </UsingTask>
</Project>